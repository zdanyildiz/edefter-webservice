/**
 * Header Preview Functions
 * Header ve Mobile Header √∂nizleme fonksiyonlarƒ±
 */

// Header tema uygulama fonksiyonlarƒ±
const HeaderThemes = {
    light: {
        'header-bg-color': '#ffffff',
        'main-menu-bg-color': '#ffffff',
        'main-menu-link-color': '#333333',
        'main-menu-link-hover-color': '#4285f4',
        'main-menu-link-bg-color': 'transparent',
        'main-menu-link-hover-bg-color': '#f8f9fa',
        'main-menu-ul-bg-color': '#ffffff',
        'main-menu-ul-submenu-link-color': '#333333',
        'main-menu-ul-submenu-link-hover-color': '#4285f4',
        'main-menu-ul-submenu-link-bg-color': '#ffffff',
        'main-menu-ul-submenu-link-hover-bg-color': '#f8f9fa'
    },
    dark: {
        'header-bg-color': '#2c3e50',
        'main-menu-bg-color': '#2c3e50',
        'main-menu-link-color': '#ecf0f1',
        'main-menu-link-hover-color': '#3498db',
        'main-menu-link-bg-color': 'transparent',
        'main-menu-link-hover-bg-color': '#34495e',
        'main-menu-ul-bg-color': '#34495e',
        'main-menu-ul-submenu-link-color': '#ecf0f1',
        'main-menu-ul-submenu-link-hover-color': '#3498db',
        'main-menu-ul-submenu-link-bg-color': '#34495e',
        'main-menu-ul-submenu-link-hover-bg-color': '#2c3e50'
    },
    transparent: {
        'header-bg-color': 'rgba(255,255,255,0.95)',
        'main-menu-bg-color': 'transparent',
        'main-menu-link-color': '#333333',
        'main-menu-link-hover-color': '#4285f4',
        'main-menu-link-bg-color': 'transparent',
        'main-menu-link-hover-bg-color': 'rgba(66,133,244,0.1)',
        'main-menu-ul-bg-color': '#ffffff',
        'main-menu-ul-submenu-link-color': '#333333',
        'main-menu-ul-submenu-link-hover-color': '#4285f4',
        'main-menu-ul-submenu-link-bg-color': '#ffffff',
        'main-menu-ul-submenu-link-hover-bg-color': '#f8f9fa'
    }
};

// ThemeEditor sƒ±nƒ±fƒ±na header fonksiyonlarƒ± ekle
if (typeof ThemeEditor !== 'undefined') {
    
    // Header tema uygulama
    ThemeEditor.prototype.applyHeaderTheme = function(themeType) {
        const theme = HeaderThemes[themeType];
        if (!theme) return;

        // Header tema deƒüerlerini form alanlarƒ±na uygula
        Object.keys(theme).forEach(key => {
            const input = $(`input[name="${key}"], select[name="${key}"]`);
            if (input.length > 0) {
                input.val(theme[key]).trigger('change');
            }
        });

        this.updatePreview();
        this.showNotification(`${themeType.charAt(0).toUpperCase() + themeType.slice(1)} header temasƒ± uygulandƒ±!`, 'success');
    };

    // Ana header preview g√ºncelleme
    ThemeEditor.prototype.updateHeaderPreview = function(formData) {
        console.log('üîß updateHeaderPreview called', formData);
        
        // √úst ƒ∞leti≈üim & Sosyal Medya √∂nizlemesi g√ºncelle
        this.updateTopContactPreview(formData);
        
        // Header Desktop √∂nizlemesi g√ºncelle
        this.updateHeaderDesktopPreview(formData);
        
        // Header Mobile √∂nizlemesi g√ºncelle  
        this.updateHeaderMobilePreview(formData);
          
        // Alƒ±≈üveri≈ü ikonlarƒ± √∂nizlemesi g√ºncelle
        this.updateShopIconsPreview(formData);
        
        // Men√º √∂nizlemesi g√ºncelle
        this.updateMenuPreview(formData);
        
        // Dual preview aktifse onlarƒ± da g√ºncelle
        if ($('.dual-preview-container').length > 0) {
            this.updateDualPreview(formData);
        }
    };

    // √úst ileti≈üim ve sosyal medya √∂nizlemesi
    ThemeEditor.prototype.updateTopContactPreview = function(formData) {
        console.log('üîß updateTopContactPreview called', formData);
        
        // CSS deƒüi≈ükenlerini g√ºncelle
        const root = document.documentElement;
        
        // Desktop deƒüi≈ükenleri
        const topContactVars = [
            'top-contact-and-social-bg-color',
            'top-contact-and-social-link-color', 
            'top-contact-and-social-link-hover-color',
            'top-contact-and-social-icon-color',
            'top-contact-and-social-icon-hover-color',
            'top-contact-and-social-container-margin-top'
        ];
        
        // Mobile deƒüi≈ükenleri
        const topContactMobileVars = [
            'top-contact-and-social-bg-color-mobile',
            'top-contact-and-social-link-color-mobile', 
            'top-contact-and-social-link-hover-color-mobile',
            'top-contact-and-social-icon-color-mobile',
            'top-contact-and-social-icon-hover-color-mobile',
            'top-contact-and-social-container-mobile-margin-top'
        ];
        
        // Desktop deƒüi≈ükenleri g√ºncelle
        topContactVars.forEach(varName => {
            if (formData[varName]) {
                let value = formData[varName];
                
                // Margin i√ßin px ekle
                if (varName.includes('margin') && !isNaN(value) && value !== '') {
                    value += 'px';
                }
                
                root.style.setProperty(`--${varName}`, value);
                console.log(`‚úÖ CSS Variable g√ºncellendi: --${varName} = ${value}`);
            }
        });
        
        // Mobile deƒüi≈ükenleri g√ºncelle
        topContactMobileVars.forEach(varName => {
            if (formData[varName]) {
                let value = formData[varName];
                
                // Margin i√ßin px ekle
                if (varName.includes('margin') && !isNaN(value) && value !== '') {
                    value += 'px';
                }
                
                root.style.setProperty(`--${varName}`, value);
                console.log(`‚úÖ Mobile CSS Variable g√ºncellendi: --${varName} = ${value}`);
            }
        });
        
        // Desktop √ºst ileti≈üim √∂nizlemesini doƒürudan g√ºncelle
        const topContactPreview = document.querySelector('#topContactPreview');
        if (topContactPreview && formData['top-contact-and-social-bg-color']) {
            topContactPreview.style.background = formData['top-contact-and-social-bg-color'];
        }
        
        // Mobile √ºst ileti≈üim √∂nizlemesini doƒürudan g√ºncelle  
        const mobileTopContact = document.querySelector('#mobileHeaderPreview > div:first-child');
        if (mobileTopContact) {
            const mobileBgColor = formData['top-contact-and-social-bg-color-mobile'] || formData['top-contact-and-social-bg-color'];
            if (mobileBgColor) {
                mobileTopContact.style.background = mobileBgColor;
            }
        }
        
        // Preview alanlarƒ±nƒ± yenile
        setTimeout(() => {
            if (topContactPreview) {
                topContactPreview.style.display = 'none';
                topContactPreview.offsetHeight; // trigger reflow
                topContactPreview.style.display = 'flex';
            }
            
            const mobileHeaderPreview = document.querySelector('#mobileHeaderPreview');
            if (mobileHeaderPreview) {
                mobileHeaderPreview.style.display = 'none';
                mobileHeaderPreview.offsetHeight; // trigger reflow
                mobileHeaderPreview.style.display = 'block';
            }
        }, 10);
    };

    // Desktop header √∂nizlemesi
    ThemeEditor.prototype.updateHeaderDesktopPreview = function(formData) {
        const headerPreview = document.querySelector('#headerPreviewContent');
        if (!headerPreview) return;

        // Header deƒüerlerini al
        const headerBgColor = formData['header-bg-color'] || '#ffffff';
        const headerBorderWidth = formData['header-border-width'] || '1';
        const headerBorderColor = formData['header-border-color'] || '#e9ecef';
        const headerPadding = formData['header-padding'] || '15';
        const headerMinHeight = formData['header-min-height'] || '80';
        const headerLogoWidth = formData['header-logo-width'] || '150';
        const primaryColor = formData['primary-color'] || '#4285f4';

        // Header container stilini g√ºncelle
        headerPreview.style.background = headerBgColor;
        headerPreview.style.borderBottom = `${headerBorderWidth}px solid ${headerBorderColor}`;
        headerPreview.style.padding = `${headerPadding}px`;
        headerPreview.style.minHeight = `${headerMinHeight}px`;
        
        // Logo stilini g√ºncelle
        const logo = headerPreview.querySelector('div[style*="LOGO"]');
        if (logo) {
            logo.style.width = `${headerLogoWidth}px`;
            logo.style.background = primaryColor;
        }

        console.log('‚úÖ Header Desktop √∂nizlemesi g√ºncellendi');
    };

    // Mobile header √∂nizlemesi
    ThemeEditor.prototype.updateHeaderMobilePreview = function(formData) {
        const mobilePreview = document.querySelector('#mobilePreview > div, #dualMobileHeaderPreview > div:nth-child(2)');
        
        if (!mobilePreview) return;

        // Mobile Header deƒüerlerini al
        const headerMobileBgColor = formData['header-mobile-bg-color'];
        const headerMobileBorderWidth = formData['header-mobile-border-width'];
        const headerMobileBorderColor = formData['header-mobile-border-color'];
        const headerMobilePadding = formData['header-mobile-padding'];
        const headerMobileMinHeight = formData['header-mobile-min-height'];
        const headerMobileLogoWidth = formData['header-mobile-logo-width'];
        const primaryColor = formData['primary-color'];

        // Mobile header container stilini g√ºncelle
        mobilePreview.style.background = headerMobileBgColor;
        mobilePreview.style.borderBottom = `${headerMobileBorderWidth}px solid ${headerMobileBorderColor}`;
        mobilePreview.style.padding = `${headerMobilePadding}px`;
        mobilePreview.style.minHeight = `${headerMobileMinHeight}px`;
        
        // Mobile logo stilini g√ºncelle
        const mobileLogo = mobilePreview.querySelector('div[style*="LOGO"]');
        if (mobileLogo) {
            mobileLogo.style.width = `${headerMobileLogoWidth}px`;
            mobileLogo.style.background = primaryColor;
        }

        console.log('‚úÖ Header Mobile √∂nizlemesi g√ºncellendi');
    };

    // Alƒ±≈üveri≈ü ikonlarƒ± √∂nizlemesi
    ThemeEditor.prototype.updateShopIconsPreview = function(formData) {
        // Alƒ±≈üveri≈ü ikon renklerini tanƒ±mla
        const iconSearchColor = formData['shop-menu-container-icon-color-search'];
        const iconMemberColor = formData['shop-menu-container-icon-color-member'] ;
        const iconFavoritesColor = formData['shop-menu-container-icon-color-favorites'];
        const iconBasketColor = formData['shop-menu-container-icon-color-basket']
        const iconHoverColor = formData['shop-menu-container-icon-hover-color'];

        // Desktop alƒ±≈üveri≈ü ikonlarƒ±
        const headerPreview = document.querySelector('#headerPreviewContent');
        if (headerPreview) {
            const searchIcon = headerPreview.querySelector('.fa-search');
            if (searchIcon) {
                searchIcon.style.color = iconSearchColor;
                searchIcon.onmouseover = () => searchIcon.style.color = iconHoverColor;
                searchIcon.onmouseout = () => searchIcon.style.color = iconSearchColor;
            }

            const memberIcon = headerPreview.querySelector('.fa-user');
            if (memberIcon) {
                memberIcon.style.color = iconMemberColor;
                memberIcon.onmouseover = () => memberIcon.style.color = iconHoverColor;
                memberIcon.onmouseout = () => memberIcon.style.color = iconMemberColor;
            }

            const favoritesIcon = headerPreview.querySelector('.fa-heart');
            if (favoritesIcon) {
                favoritesIcon.style.color = iconFavoritesColor;
                favoritesIcon.onmouseover = () => favoritesIcon.style.color = iconHoverColor;
                favoritesIcon.onmouseout = () => favoritesIcon.style.color = iconFavoritesColor;
            }

            const basketIcon = headerPreview.querySelector('.fa-shopping-cart');
            if (basketIcon) {
                basketIcon.style.color = iconBasketColor;
                basketIcon.onmouseover = () => basketIcon.style.color = iconHoverColor;
                basketIcon.onmouseout = () => basketIcon.style.color = iconBasketColor;
            }
        }
        
        // Mobile alƒ±≈üveri≈ü ikonlarƒ±nƒ± g√ºncelle
        this.updateMobileShopIconsPreview(formData);

        console.log('‚úÖ Alƒ±≈üveri≈ü ikonlarƒ± √∂nizlemesi g√ºncellendi');
    };

    // Mobile alƒ±≈üveri≈ü ikonlarƒ± √∂nizlemesi
    ThemeEditor.prototype.updateMobileShopIconsPreview = function(formData) {
        console.log('üîß updateMobileShopIconsPreview called', formData);
        
        // CSS deƒüi≈ükenlerini g√ºncelle
        const root = document.documentElement;
        
        const mobileIconVars = [
            'mobile-action-icon-phone-bg-color',
            'mobile-action-icon-whatsapp-bg-color',
            'mobile-action-icon-basket-bg-color',
            'mobile-action-icon-basket-counter-bg-color',
            'mobile-action-icon-size',
            'mobile-action-icon-gap'
        ];
        
        // CSS deƒüi≈ükenlerini g√ºncelle
        mobileIconVars.forEach(varName => {
            if (formData[varName]) {
                let value = formData[varName];
                
                // Size ve gap i√ßin px ekle
                if ((varName.includes('size') || varName.includes('gap')) && !isNaN(value) && value !== '') {
                    value += 'px';
                }
                
                root.style.setProperty(`--${varName}`, value);
            }
        });
        
        // Mobile header preview'daki action iconlarƒ± g√ºncelle
        const mobileActionContainer = document.querySelector('#mobileHeaderPreview div:last-child > div:last-child');
        if (mobileActionContainer) {
            // Gap g√ºncelle
            if (formData['mobile-action-icon-gap']) {
                mobileActionContainer.style.gap = formData['mobile-action-icon-gap'] + 'px';
            }
            
            // Action iconlarƒ± g√ºncelle
            const actionIcons = mobileActionContainer.children;
            
            if (actionIcons[0] && formData['mobile-action-icon-phone-bg-color']) {
                actionIcons[0].style.background = formData['mobile-action-icon-phone-bg-color'];
                if (formData['mobile-action-icon-size']) {
                    actionIcons[0].style.width = formData['mobile-action-icon-size'] + 'px';
                    actionIcons[0].style.height = formData['mobile-action-icon-size'] + 'px';
                }
            }
            
            if (actionIcons[1] && formData['mobile-action-icon-whatsapp-bg-color']) {
                actionIcons[1].style.background = formData['mobile-action-icon-whatsapp-bg-color'];
                if (formData['mobile-action-icon-size']) {
                    actionIcons[1].style.width = formData['mobile-action-icon-size'] + 'px';
                    actionIcons[1].style.height = formData['mobile-action-icon-size'] + 'px';
                }
            }
            
            if (actionIcons[2]) {
                if (formData['mobile-action-icon-basket-bg-color']) {
                    actionIcons[2].style.background = formData['mobile-action-icon-basket-bg-color'];
                }
                if (formData['mobile-action-icon-size']) {
                    actionIcons[2].style.width = formData['mobile-action-icon-size'] + 'px';
                    actionIcons[2].style.height = formData['mobile-action-icon-size'] + 'px';
                }
                
                // Sepet sayacƒ±
                const counter = actionIcons[2].querySelector('div');
                if (counter && formData['mobile-action-icon-basket-counter-bg-color']) {
                    counter.style.background = formData['mobile-action-icon-basket-counter-bg-color'];
                }
            }
        }
        
        console.log('üé® Mobile action icons preview g√ºncellendi');
    };

    // Header Preview Toggle Sistemi
    ThemeEditor.prototype.initHeaderPreviewToggle = function() {
        const self = this;
        console.log('üîß initHeaderPreviewToggle ba≈ülatƒ±ldƒ±');
        
        // Desktop Header Toggle
        $(document).on('click', '#toggleHeaderPreview', function(e) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            if (self.isHeaderToggling) return false;
            
            self.isHeaderToggling = true;
            
            setTimeout(() => {
                self.toggleHeaderPreview('desktop');
                setTimeout(() => {
                    self.isHeaderToggling = false;
                }, 500);
            }, 100);
            
            return false;
        });
        
        // Mobile Header Toggle
        $(document).on('click', '#toggleMobileHeaderPreview', function(e) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            if (self.isHeaderToggling) return false;
            
            self.isHeaderToggling = true;
            
            setTimeout(() => {
                self.toggleHeaderPreview('mobile');
                setTimeout(() => {
                    self.isHeaderToggling = false;
                }, 500);
            }, 100);
            
            return false;
        });
        
        // Dual Preview butonlarƒ±
        $(document).on('click', '#openDualPreview, #openDualPreviewFromMobile', function(e) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            if (self.isHeaderToggling) return false;
            
            self.isHeaderToggling = true;
            
            setTimeout(() => {
                self.openDualPreview();
                self.isHeaderToggling = false;
            }, 100);
            
            return false;
        });
        
        console.log('‚úÖ Header preview toggle event listeners eklendi');
    };

    // Header Preview Toggle Logic
    ThemeEditor.prototype.toggleHeaderPreview = function(type) {
        console.log(`üîÑ toggleHeaderPreview √ßaƒürƒ±ldƒ±: ${type}`);
        
        // Dual preview kontrol et
        if ($('.dual-preview-container').length > 0) {
            console.log('üìç Dual preview kapatƒ±lƒ±yor...');
            this.closeDualPreview();
            return;
        }
        
        const isDesktop = type === 'desktop';
        const cardId = isDesktop ? '#headerPreviewCard' : '#mobileHeaderPreviewCard';
        const iconId = isDesktop ? '#headerPreviewToggleIcon' : '#mobileHeaderPreviewToggleIcon';
        const bodyClass = isDesktop ? 'header-preview-pinned' : 'mobile-header-preview-pinned';
        const buttonId = isDesktop ? '#toggleHeaderPreview' : '#toggleMobileHeaderPreview';
        const previewFixedClass = isDesktop ? 'header-preview-fixed' : 'mobile-header-preview-fixed';
        
        const $card = $(cardId);
        const $icon = $(iconId);
        const $button = $(buttonId);
        const $body = $('body');
        
        if ($card.length === 0) {
            console.error(`‚ùå ${cardId} elementi bulunamadƒ±!`);
            return;
        }
        
        // Tek preview aktifse kapat, deƒüilse dual preview a√ß
        if ($card.hasClass(previewFixedClass)) {
            console.log('üìç Tek preview kapatƒ±lƒ±yor...');
            this.unpinHeaderPreview(type, $card, $icon, $button, $body, bodyClass);
        } else {
            console.log('üîÑ Dual preview a√ßƒ±lƒ±yor...');
            this.openDualPreview();
        }
    };

    // Dual Preview Sistemi
    ThemeEditor.prototype.openDualPreview = function() {
        console.log('üîÑ openDualPreview ba≈ülatƒ±ldƒ±');
        
        // Mevcut sabitlenmi≈ü preview'larƒ± kaldƒ±r
        $('.header-preview-fixed, .mobile-header-preview-fixed').removeClass('header-preview-fixed mobile-header-preview-fixed');
        $('body').removeClass('header-preview-pinned mobile-header-preview-pinned');
        
        // Icon ve buton durumlarƒ±nƒ± sƒ±fƒ±rla
        $('#headerPreviewToggleIcon, #mobileHeaderPreviewToggleIcon').removeClass('fa-compress').addClass('fa-expand');
        $('#toggleHeaderPreview, #toggleMobileHeaderPreview').removeClass('preview-pinned');
        
        // Desktop ve Mobile preview i√ßeriklerini al
        const desktopTopContactContent = $('#topContactPreview').prop('outerHTML');
        const desktopMainHeaderContent = $('#headerPreviewContent').prop('outerHTML');
        const mobileHeaderContent = $('#mobileHeaderPreview').html();
        
        // Dual preview container'ƒ± olu≈ütur
        const dualPreviewHTML = `
            <div class="dual-preview-container" id="dualPreviewContainer">
                <button type="button" class="dual-preview-close" id="closeDualPreview" title="√ñnizlemeyi kapat">
                    <i class="fa fa-times"></i>
                </button>
                
                <div class="dual-preview-desktop">
                    <div class="card-header">
                        <h5><i class="fa fa-desktop"></i> Desktop Header Preview</h5>
                    </div>
                    <div class="card-body">
                        <div class="theme-preview" id="dualDesktopHeaderPreview">
                            ${desktopTopContactContent}
                            ${desktopMainHeaderContent}
                        </div>
                    </div>
                </div>
                
                <div class="dual-preview-mobile">
                    <div class="card-header">
                        <h5><i class="fa fa-mobile"></i> Mobile Header Preview</h5>
                    </div>
                    <div class="card-body">
                        <div class="theme-preview" id="dualMobileHeaderPreview">
                            ${mobileHeaderContent}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Body'ye ekle
        $('body').append(dualPreviewHTML);
        $('body').addClass('dual-preview-active');
        $('#headerPreviewRow').addClass('hidden');
        
        // Close butonuna event listener ekle
        $(document).on('click', '#closeDualPreview', () => {
            this.closeDualPreview();
        });
        
        // ESC tu≈üu ile kapatma
        $(document).on('keydown.dualpreview', (e) => {
            if (e.keyCode === 27) { // ESC
                this.closeDualPreview();
            }
        });
        
        // ƒ∞kon durumlarƒ±nƒ± g√ºncelle
        $('#headerPreviewToggleIcon, #mobileHeaderPreviewToggleIcon').removeClass('fa-expand').addClass('fa-compress');
        $('#toggleHeaderPreview, #toggleMobileHeaderPreview').addClass('preview-pinned');
        
        // Otomatik scroll
        setTimeout(() => {
            $('html, body').animate({ scrollTop: 0 }, 300);
        }, 100);
        
        // Bildirim g√∂ster
        this.showNotification('üîÑ Dual Preview: Desktop ve Mobile header yan yana g√∂r√ºnt√ºleniyor', 'success', 3000);
        
        console.log('‚úÖ Dual preview a√ßƒ±ldƒ±');
    };
    
    ThemeEditor.prototype.closeDualPreview = function() {
        console.log('üîÑ closeDualPreview ba≈ülatƒ±ldƒ±');
        
        // Animasyonlƒ± kaldƒ±rma
        $('.dual-preview-container').addClass('header-preview-removing');
        
        setTimeout(() => {
            // Container'ƒ± kaldƒ±r
            $('.dual-preview-container').remove();
            $('body').removeClass('dual-preview-active');
            
            // Event listener'larƒ± temizle
            $(document).off('keydown.dualpreview');
            $(document).off('click', '#closeDualPreview');
            
            // ƒ∞kon durumlarƒ±nƒ± sƒ±fƒ±rla
            $('#headerPreviewToggleIcon, #mobileHeaderPreviewToggleIcon').removeClass('fa-compress').addClass('fa-expand');
            $('#toggleHeaderPreview, #toggleMobileHeaderPreview').removeClass('preview-pinned');
            
            console.log('‚úÖ Dual preview kapatƒ±ldƒ±');
        }, 300);

        $('#headerPreviewRow').removeClass('hidden');
        
        // Bildirim g√∂ster
        this.showNotification('üìç Dual Preview kapatƒ±ldƒ±', 'info', 2000);
    };

    ThemeEditor.prototype.updateDualPreview = function(formData) {
        console.log('üîß updateDualPreview called');
        
        // Dual preview elemanƒ±nƒ± g√ºncelle
        const $dualDesktopPreview = $('#dualDesktopHeaderPreview');
        const $dualMobilePreview = $('#dualMobileHeaderPreview');
        
        if ($dualDesktopPreview.length > 0) {
            const topContactHTML = $('#topContactPreview').prop('outerHTML');
            const headerContentHTML = $('#headerPreviewContent').prop('outerHTML');
            
            $dualDesktopPreview.html(`
                ${topContactHTML}
                ${headerContentHTML}
            `);
        }
        
        if ($dualMobilePreview.length > 0) {
            const mobileContent = $('#mobileHeaderPreview').html();
            $dualMobilePreview.html(mobileContent);
        }
        
        console.log('‚úÖ Dual preview i√ßerikleri g√ºncellendi');
    };
} else {
    console.error('‚ùå header.js:ThemeEditor sƒ±nƒ±fƒ± bulunamadƒ±! core.js y√ºklenmi≈ü mi?');
}

// HTML'den √ßaƒürƒ±lacak global fonksiyon
function applyHeaderTheme(themeName) {
    if (window.themeEditorInstance) {
        window.themeEditorInstance.applyHeaderTheme(themeName);
    }
}
