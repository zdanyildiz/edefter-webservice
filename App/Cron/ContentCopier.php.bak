<?php
// App/Cron/ContentCopier.php
// Bu script, bir cron job olarak çalışarak `language_copy_jobs` tablosundaki bekleyen iş emirlerini işler.
// Görevi, bir dildeki tüm kategori ve sayfa hiyerarşisini başka bir dile kopyalamaktır.

/**
 * @todo menü ve banner kopyalama üzerinde düşünülecek
 */

$documentRoot = str_replace("\\","/",realpath(dirname(__FILE__, 3)));
$directorySeparator = str_replace("\\","/",DIRECTORY_SEPARATOR);
include_once $documentRoot . $directorySeparator . 'App/Core/CronGlobal.php';

/**
 * @var AdminDatabase $db
 * @var Helper $helper
 */

// --- Model Sınıflarının Başlatılması ---
include_once MODEL."Admin/AdminLanguage.php";
$adminLanguage = new AdminLanguage($db);

include_once MODEL."Admin/AdminCategory.php";
$adminCategory = new AdminCategory($db);

include_once MODEL."Admin/AdminPage.php";
$adminPage = new AdminPage($db);

include_once MODEL."Admin/AdminSeo.php";
$adminSeo = new AdminSeo($db);

include_once MODEL."Admin/AdminMenu.php";
$adminMenu = new AdminMenu($db);

include_once MODEL."Admin/AdminBannerModel.php";
$adminBannerDisplayRulesModel = new AdminBannerDisplayRulesModel($db);
$adminBannerGroupModel = new AdminBannerGroupModel($db);
$adminBannerModel = new AdminBannerModel($db);
$adminBannerStyleModel = new AdminBannerStyleModel($db);

Log::adminWrite("ContentCopier cron job'u başladı.", "info", "cron-copier");

$pendingJob = $adminLanguage->getPendingCopyJob();

if (!$pendingJob) {
    Log::adminWrite("Bekleyen kopyalama iş emri bulunamadı. Çıkılıyor.", "info", "cron-copier");
    exit();
}

$jobId = $pendingJob['id'];

// Transaction başlat
$db->beginTransaction("ContentCopier-Job#{$jobId}");

try {
    $adminLanguage->updateCopyJobStatus($jobId, 'processing');
    Log::adminWrite("İş emri #{$jobId} işlenmeye başlandı.", "info", "cron-copier");

    $sourceLangId = $pendingJob['source_language_id'];
    $targetLangId = $pendingJob['target_language_id'];
    $translateWithAI = (bool)$pendingJob['translate_with_ai'];
    $translationStatus = $translateWithAI ? 'pending' : 'completed';

    // Kategori ve sayfaları kopyalamak için özyinelemeli fonksiyon
    function copyCategoryAndChildren($parentId, $newParentId, $sourceLangId, $targetLangId, $translationStatus, $models) {
        $categories = $models['category']->getSubcategory($parentId, $sourceLangId); // Sadece kaynak dildeki kategorileri al

        foreach ($categories as $category) {

            // 1. Kategoriyi Kopyala
            $originalCategoryId = $category['categoryID'];
            $newCategoryUniqID = $models['helper']->generateUniqID();
            
            // Kategori benzersiz ID'sini logla (debug için)
            $originalUniqID = $category['benzersizid'] ?? null;
            Log::adminWrite("Kategori kopyalanıyor - ID: {$originalCategoryId}, UniqID: {$originalUniqID}", "info", "cron-copier");
            
            unset($category['categoryLanguageID']);
            unset($category['categoryCreationDate']);
            unset($category['categoryUpdateDate']);
            unset($category['categoryParentID']);
            unset($category['categoryUniqID']);
            unset($category['categoryDelete']);
            unset($category['categoryGroup']);
            unset($category['categoryUniqueID']); // Bu fazla parametre hata yapıyordu

            $categoryData = $category;
            unset($categoryData['categoryID'], $categoryData['subcategories']); // Gereksiz verileri temizle
            $categoryData['languageID'] = $targetLangId;
            $categoryData['createDate'] = date("Y-m-d H:i:s");
            $categoryData['updateDate'] = date("Y-m-d H:i:s");
            $categoryData['topCategoryID'] = $newParentId;
            $categoryData['categoryUniqID'] = $newCategoryUniqID;

            // Kategoriyi veritabanına ekle
            $addCategory = $models['category']->insertCategory($categoryData);
            if ($addCategory['status'] === 'error') {
                Log::adminWrite("Kategori kopyalanamadı: " . $addCategory['message'], "error", "cron-copier");
                throw new Exception("Kategori kopyalanamadı: " . $addCategory['message']);
            }

            $newCategoryId = $addCategory['categoryID'];
            Log::adminWrite("Kategori başarıyla kopyalandı - Yeni ID: {$newCategoryId}", "info", "cron-copier");

            // 2. Kategori Haritasını Oluştur
            $models['language']->addLanguageCategoryMapping([
                'originalCategoryID' => $originalCategoryId,
                'translatedCategoryID' => $newCategoryId,
                'languageID' => $targetLangId,
                'translationStatus' => $translationStatus
            ]);

            // 3. SEO Bilgisini Kopyala (Düzeltilmiş)
            if ($originalUniqID) {
                Log::adminWrite("SEO bilgisi aranıyor - UniqID: {$originalUniqID}", "info", "cron-copier");
                $originalSeo = $models['seo']->getSeoByUniqId($originalUniqID);
                
                if ($originalSeo) {
                    Log::adminWrite("SEO bilgisi bulundu, kopyalanıyor", "info", "cron-copier");
                    
                    // Yeni SEO verisi hazırla
                    $newSeoData = $originalSeo;
                    $newSeoData['seoUniqID'] = $newCategoryUniqID;
                    
                    // Eksik alanları kontrol et ve varsayılan değerler ata
                    if (!isset($newSeoData['seoOriginalLink']) || empty($newSeoData['seoOriginalLink'])) {
                        $newSeoData['seoOriginalLink'] = $newSeoData['seoLink'] ?? '';
                    }
                    if (!isset($newSeoData['seoImage'])) {
                        $newSeoData['seoImage'] = '';
                    }
                    
                    $seoResult = $models['seo']->insertSeo($newSeoData);
                    if ($seoResult['status'] === 'error') {
                        Log::adminWrite("SEO kopyalama hatası: " . $seoResult['message'], "error", "cron-copier");
                        throw new Exception("SEO bilgisi kopyalanamadı: " . $seoResult['message']);
                    }
                    Log::adminWrite("SEO bilgisi başarıyla kopyalandı", "info", "cron-copier");
                } else {
                    Log::adminWrite("SEO bilgisi bulunamadı - UniqID: {$originalUniqID}", "warning", "cron-copier");
                }
            }
            else {
                Log::adminWrite("Kategori UniqID bulunamadı, SEO kopyalanamıyor", "warning", "cron-copier");
            }

            // 4. Kategoriye Ait Sayfaları Kopyala
            $pages = $models['page']->getCategoryPages($originalCategoryId, $sourceLangId);
            foreach ($pages as $page) {
                $originalPageId = $page['pageID'];
                $originalPageUniqID = $page['pageUniqID'] ?? null;
                $newPageUniqID = $models['helper']->generateUniqID();

                Log::adminWrite("Sayfa kopyalanıyor - ID: {$originalPageId}, UniqID: {$originalPageUniqID}", "info", "cron-copier");

                $pageData = $page;
                unset($pageData['pageID'], $pageData['pageTypePermission']);
                $pageData['pageUniqID'] = $newPageUniqID;
                $pageData['pageCreateDate'] = date("Y-m-d H:i:s");
                $pageData['pageUpdateDate'] = date("Y-m-d H:i:s");

                $addPage = $models['page']->insertPage($pageData);
                if ($addPage['status'] === 'error') {
                    Log::adminWrite("Sayfa kopyalanamadı: " . $addPage['message'], "error", "cron-copier");
                    throw new Exception("Sayfa kopyalanamadı: " . $addPage['message']);
                }

                $newPageId = $addPage['pageID'];
                Log::adminWrite("Sayfa başarıyla kopyalandı - Yeni ID: {$newPageId}", "info", "cron-copier");

                $models['page']->insertPageCategory(['pageID' => $newPageId, 'categoryID' => $newCategoryId]);
                $models['language']->addLanguagePageMapping([
                    'originalPageID' => $originalPageId,
                    'translatedPageID' => $newPageId,
                    'languageID' => $targetLangId,
                    'translationStatus' => $translationStatus
                ]);

                // Sayfa SEO bilgisini kopyala (Düzeltilmiş)
                if ($originalPageUniqID) {
                    Log::adminWrite("Sayfa SEO bilgisi aranıyor - UniqID: {$originalPageUniqID}", "info", "cron-copier");
                    $originalPageSeo = $models['seo']->getSeoByUniqId($originalPageUniqID);
                    
                    if ($originalPageSeo) {
                        Log::adminWrite("Sayfa SEO bilgisi bulundu, kopyalanıyor", "info", "cron-copier");
                        
                        // Yeni SEO verisi hazırla
                        $newPageSeoData = $originalPageSeo;
                        $newPageSeoData['seoUniqID'] = $newPageUniqID;
                        
                        // Eksik alanları kontrol et
                        if (!isset($newPageSeoData['seoOriginalLink']) || empty($newPageSeoData['seoOriginalLink'])) {
                            $newPageSeoData['seoOriginalLink'] = $newPageSeoData['seoLink'] ?? '';
                        }
                        if (!isset($newPageSeoData['seoImage'])) {
                            $newPageSeoData['seoImage'] = '';
                        }
                        
                        $pageSeoResult = $models['seo']->insertSeo($newPageSeoData);
                        if ($pageSeoResult['status'] === 'error') {
                            Log::adminWrite("Sayfa SEO kopyalama hatası: " . $pageSeoResult['message'], "error", "cron-copier");
                            throw new Exception("Sayfa SEO bilgisi kopyalanamadı: " . $pageSeoResult['message']);
                        }
                        Log::adminWrite("Sayfa SEO bilgisi başarıyla kopyalandı", "info", "cron-copier");
                    } else {
                        Log::adminWrite("Sayfa SEO bilgisi bulunamadı - UniqID: {$originalPageUniqID}", "warning", "cron-copier");
                        throw new Exception("Sayfa SEO bilgisi bulunamadı: " . $pageSeoResult['message']);
                    }

                    $pageImages = $models['page']->getPageImages($originalPageId);
                    if(!empty($pageImages)){
                        $imageList = explode('||', $pageImages);
                        foreach ($imageList as $imageData){
                            if(preg_match('/imageID:(\d+)/', $imageData, $matches)){
                                $imageID = $matches[1];
                                if(!$models['page']->insertPageImages([
                                    'pageID' => $newPageId,
                                    'imageIDs' => [$imageID],
                                ])){
                                    Log::adminWrite("Resim yüklenemedi: Sayfa id: $newPageId , resim id: ". $imageID,'error', "cron-copier");
                                    throw new Exception("Dosya yüklenemedi: Sayfa id: $newPageId , resim id: ". $imageID);
                                }
                            }
                        }
                    }

                    $pageGalleries = $models['page']->getPageGallery($originalPageId);
                    if(!$pageGalleries && count($pageGalleries)>0){
                        foreach ($pageGalleries as $pageGallery){
                            if(!$models['page']->addPageGallery($newPageId,$pageGallery['galleryID'])){
                                Log::adminWrite("Galeri yüklenemedi: Sayfa id: $newPageId , galeri id: ". $pageGallery['galleryID'],'error', "cron-copier");
                                throw new Exception("Galeri yüklenemedi: Sayfa id: $newPageId , galeri id: ". $pageGallery['galleryID']);
                            }
                        }
                    }

                    $pageVideos = $models['page']->getPageVideos($originalPageId);
                    if(!$pageVideos && count($pageVideos)>0){
                        foreach ($pageVideos as $pageVideo){
                            if(!$models['page']->insertPageVideos(['pageID' =>$newPageId, 'videoID' => $pageVideo['videoID']])){
                                Log::adminWrite("Video yüklenemedi: Sayfa id: $newPageId , video id: ". $pageVideo['videoID'],'error', "cron-copier");
                                throw new Exception("Video yüklenemedi: Sayfa id: $newPageId , video id: ". $pageVideo['videoID']);
                            }
                        }
                    }

                    $pageFiles = $models['page']->getPageFilees($originalPageId);
                    if(!empty($pageFiles)){
                        $fileList = explode('||', $pageImages);
                        foreach ($fileList as $fileData){
                            if(preg_match('/imageID:(\d+)/', $fileData, $matches)){
                                $fileID = $matches[1];
                                if(!$models['page']->insertPageFiles([
                                    'pageID' => $newPageId,
                                    'fileIDs' => [$fileID],
                                ])){
                                    Log::adminWrite("Dosya yüklenemedi: Sayfa id: $newPageId , dosya id: ". $fileID,'error', "cron-copier");
                                    throw new Exception("Dosya yüklenemedi: Sayfa id: $newPageId , dosya id: ". $fileID);
                                }
                            }
                        }
                    }
                }
                else {
                    Log::adminWrite("Sayfa UniqID bulunamadı, SEO kopyalanamıyor", "warning", "cron-copier");
                }
            }

            // 5. Alt Kategoriler İçin Tekrarla (Özyineleme)
            copyCategoryAndChildren($originalCategoryId, $newCategoryId, $sourceLangId, $targetLangId, $translationStatus, $models);
        }
    }

    $models = [
        'category' => $adminCategory,
        'page' => $adminPage,
        'seo' => $adminSeo,
        'language' => $adminLanguage,
        'helper' => $helper
    ];
    // Kopyalama işlemini en üst seviye kategorilerden (ustkategoriid = 0) başlat
    copyCategoryAndChildren(0, 0, $sourceLangId, $targetLangId, $translationStatus, $models);

    //$targetLangId altında menü eklenmiş mi kontrol edelim. Yoksa menüleri kopyalaylım.
    if(!$adminMenu->checkMenuByLanguage($targetLangId)){
        $originalLanguageMenus = $adminMenu->getMenuByLanguage($sourceLangId);
        if($originalLanguageMenus){
            foreach ($originalLanguageMenus as $originalLanguageMenuData){
                $newMenuData = [
                    "languageID" => $targetLangId,
                    "menuLocation" => $originalLanguageMenuData["menukategori"],
                    "menuParent" => $originalLanguageMenuData["ustmenuid"],
                    "menuLayer" => $originalLanguageMenuData["menukatman"],
                    "menuName" => $originalLanguageMenuData["menuad"],
                    "menuLink" => $originalLanguageMenuData["menulink"],
                    "menuArea" => $originalLanguageMenuData["menusira"],
                    "getSubCategory" => $originalLanguageMenuData["altkategori"],
                    "contentUniqID" => $originalLanguageMenuData["menubenzersizid"],
                    "contentOrjUniqID" => $originalLanguageMenuData["orjbenzersizid"],
                    "menuType" => $originalLanguageMenuData["menuType"]
                ];

                if(!$adminMenu->saveMenu($newMenuData)){
                    Log::adminWrite("Menü kopyalanamadı. Hedef Dil id: ".$targetLangId, "error", "cron-copier");
                    throw new Exception("Menü kopyalanamadı. Hedef Dil id: ".$targetLangId);
                }
            }
        }
    }

    $targetLangCode = $adminLanguage->getLanguageCode($targetLangId);
    $sourceLangCode = $adminLanguage->getLanguageCode($sourceLangId);
    if(!$adminBannerDisplayRulesModel->getDisplayRuleByLanguageCode($targetLangCode)){
        $bannerDisplayRules = $adminBannerDisplayRulesModel->getDisplayRuleByLanguageCode($sourceLangCode);
        foreach ($bannerDisplayRules as $bannerDisplayRule){
            $group_id = $bannerDisplayRule['group_id'];
            $language_code = $targetLangCode;
            $bannerTypeID = $bannerDisplayRule['type_id'];

            if(!empty($bannerDisplayRule['category_id'])){
                $category_id = $adminLanguage->getTargetCategoryID($targetLangCode,$bannerDisplayRule['category_id']);
            }

            $category_id = $category_id ?? null;

            if(!empty($bannerDisplayRule['page_id'])){
                $page_id = $adminLanguage->getTargetPageID($targetLangCode,$bannerDisplayRule['page_id']);
            }

            $page_id = $page_id ?? null;


            $newDisplayId = $adminBannerDisplayRulesModel->addDisplayRule($group_id, $bannerTypeID, $page_id, $category_id, $language_code);
            if(!$newDisplayId){
                Log::adminWrite("Banner Görüntüleme kopyalanamadı. Hedef Dil id: ".$targetLangCode, "error", "cron-copier");
                throw new Exception("Banner Görüntüleme  kopyalanamadı. Hedef Dil id: ".$targetLangCode);
            }

            //banner gruplarını kopyalayalım
            $originalBannerGroup = $adminBannerGroupModel->getGroupById($group_id);
            if(!$originalBannerGroup){
                Log::adminWrite("Banner Grubu kopyalanamadı. Hedef Dil id: ".$targetLangCode, "error", "cron-copier");
                throw new Exception("Banner Grubu  kopyalanamadı. Hedef Dil id: ".$targetLangCode);
            }

            $group_name = $originalBannerGroup['group_name'];
            $group_title = $originalBannerGroup['group_title'];
            $group_desc = $originalBannerGroup['group_desc'];
            $layout_id = $originalBannerGroup['layout_id'];
            $group_kind = $originalBannerGroup['group_kind'];
            $group_view = $originalBannerGroup['group_view'];
            $columns = $originalBannerGroup['columns'];
            $content_alignment = $originalBannerGroup['content_alignment'];
            $style_class = $originalBannerGroup['style_class'];
            $background_color = $originalBannerGroup['background_color'];
            $group_title_color = $originalBannerGroup['group_title_color'];
            $group_desc_color = $originalBannerGroup['group_desc_color'];
            $full_size = $originalBannerGroup['group_full_size'];
            $custom_css = $originalBannerGroup['custom_css'];
            $order_num = $originalBannerGroup['order_num'];
            $visibility_start = $originalBannerGroup['visibility_start'];
            $visibility_end = $originalBannerGroup['visibility_end'];
            $banner_duration = $originalBannerGroup['banner_duration'];
            $banner_full_size = $originalBannerGroup['banner_full_size'];

            $newGroupId = $adminBannerGroupModel->addGroup($group_name, $group_title, $group_desc, $layout_id, $group_kind, $group_view, $columns, $content_alignment, $style_class, $background_color, $group_title_color, $group_desc_color, $full_size, $custom_css, $order_num, $visibility_start, $visibility_end, $banner_duration, $banner_full_size);
            if(!$newGroupId){
                Log::adminWrite("Banner Grubu Eklenemedi. Hedef Dil id: ".$targetLangCode, "error", "cron-copier");
                throw new Exception("Banner Grubu  Eklenemedi. Hedef Dil id: ".$targetLangCode);
            }

            $originalBanners = $adminBannerModel->getBannersByGroupID($group_id);
            if(!$originalBanners){
                Log::adminWrite("Banner getirilemedi. Hedef Dil id: ".$targetLangCode, "error", "cron-copier");
                throw new Exception("Banner  getirilemedi. Hedef Dil id: ".$targetLangCode);
            }



            foreach ($originalBanners as $originalBanner){
                $originalStyle = $adminBannerStyleModel->getStyleById($originalBanner['style_id']);
                if(!$originalStyle){
                    Log::adminWrite("Banner sitili kopyalanamadı. Hedef Dil id: ".$targetLangCode, "error", "cron-copier");
                    throw new Exception("Banner  sitili kopyalanamadı. Hedef Dil id: ".$targetLangCode);
                }

                $newStyleId = $this->$adminBannerStyleModel->addStyle($originalStyle['banner_height_size'], $originalStyle['background_color'], $originalStyle['content_box_bg_color'], $originalStyle['title_color'], $originalStyle['title_size'],$originalStyle['content_color'], $originalStyle['content_size'], $originalStyle['show_button'], $originalStyle['button_title'], $originalStyle['button_location'], $originalStyle['button_background'], $originalStyle['button_color'], $originalStyle['button_hover_background'],$originalStyle['button_hover_color'],$originalStyle['button_size']);

                if(!$newStyleId){
                    Log::adminWrite("Banner sitili eklenemedi. Hedef Dil id: ".$targetLangCode, "error", "cron-copier");
                    throw new Exception("Banner  sitili eklenemedi. Hedef Dil id: ".$targetLangCode);
                }

                $newBannerId = $this->$adminBannerModel->addBanner($newGroupId, $originalBanner['style_id'], $originalBanner['title'], $originalBanner['content'], $originalBanner['image'], $originalBanner['link'], $originalBanner['active']);

                if(!$newBannerId){
                    Log::adminWrite("Banner eklenemedi. Hedef Dil id: ".$targetLangCode, "error", "cron-copier");
                    throw new Exception("Banner eklenemedi. Hedef Dil id: ".$targetLangCode);
                }
            }
        }
    }

    // Transaction'ı commit et
    $db->commit("ContentCopier-Job#{$jobId}");
    
    $adminLanguage->updateCopyJobStatus($jobId, 'completed');
    Log::adminWrite("İş emri #{$jobId} başarıyla tamamlandı.", "info", "cron-copier");

} catch (Exception $e) {
    // Hata durumunda rollback yap
    $db->rollback("ContentCopier-Job#{$jobId}");
    
    $errorMessage = $e->getMessage();
    $adminLanguage->updateCopyJobStatus($jobId, 'failed', $errorMessage);
    Log::adminWrite("İş emri #{$jobId} işlenirken hata oluştu: {$errorMessage}", "error", "cron-copier");
    Log::adminWrite("Transaction rollback yapıldı.", "warning", "cron-copier");
}

Log::adminWrite("ContentCopier cron job'u bitti.", "info", "cron-copier");
?>
